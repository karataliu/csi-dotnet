// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: csi.proto
// </auto-generated>
#pragma warning disable 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Csi.V0 {
  public static partial class Identity
  {
    static readonly string __ServiceName = "csi.v0.Identity";

    static readonly grpc::Marshaller<global::Csi.V0.GetPluginInfoRequest> __Marshaller_GetPluginInfoRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Csi.V0.GetPluginInfoRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Csi.V0.GetPluginInfoResponse> __Marshaller_GetPluginInfoResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Csi.V0.GetPluginInfoResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Csi.V0.GetPluginCapabilitiesRequest> __Marshaller_GetPluginCapabilitiesRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Csi.V0.GetPluginCapabilitiesRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Csi.V0.GetPluginCapabilitiesResponse> __Marshaller_GetPluginCapabilitiesResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Csi.V0.GetPluginCapabilitiesResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Csi.V0.ProbeRequest> __Marshaller_ProbeRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Csi.V0.ProbeRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Csi.V0.ProbeResponse> __Marshaller_ProbeResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Csi.V0.ProbeResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::Csi.V0.GetPluginInfoRequest, global::Csi.V0.GetPluginInfoResponse> __Method_GetPluginInfo = new grpc::Method<global::Csi.V0.GetPluginInfoRequest, global::Csi.V0.GetPluginInfoResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetPluginInfo",
        __Marshaller_GetPluginInfoRequest,
        __Marshaller_GetPluginInfoResponse);

    static readonly grpc::Method<global::Csi.V0.GetPluginCapabilitiesRequest, global::Csi.V0.GetPluginCapabilitiesResponse> __Method_GetPluginCapabilities = new grpc::Method<global::Csi.V0.GetPluginCapabilitiesRequest, global::Csi.V0.GetPluginCapabilitiesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetPluginCapabilities",
        __Marshaller_GetPluginCapabilitiesRequest,
        __Marshaller_GetPluginCapabilitiesResponse);

    static readonly grpc::Method<global::Csi.V0.ProbeRequest, global::Csi.V0.ProbeResponse> __Method_Probe = new grpc::Method<global::Csi.V0.ProbeRequest, global::Csi.V0.ProbeResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Probe",
        __Marshaller_ProbeRequest,
        __Marshaller_ProbeResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Csi.V0.CsiReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Identity</summary>
    public abstract partial class IdentityBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Csi.V0.GetPluginInfoResponse> GetPluginInfo(global::Csi.V0.GetPluginInfoRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Csi.V0.GetPluginCapabilitiesResponse> GetPluginCapabilities(global::Csi.V0.GetPluginCapabilitiesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Csi.V0.ProbeResponse> Probe(global::Csi.V0.ProbeRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Identity</summary>
    public partial class IdentityClient : grpc::ClientBase<IdentityClient>
    {
      /// <summary>Creates a new client for Identity</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public IdentityClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Identity that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public IdentityClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected IdentityClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected IdentityClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Csi.V0.GetPluginInfoResponse GetPluginInfo(global::Csi.V0.GetPluginInfoRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetPluginInfo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Csi.V0.GetPluginInfoResponse GetPluginInfo(global::Csi.V0.GetPluginInfoRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetPluginInfo, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Csi.V0.GetPluginInfoResponse> GetPluginInfoAsync(global::Csi.V0.GetPluginInfoRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetPluginInfoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Csi.V0.GetPluginInfoResponse> GetPluginInfoAsync(global::Csi.V0.GetPluginInfoRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetPluginInfo, null, options, request);
      }
      public virtual global::Csi.V0.GetPluginCapabilitiesResponse GetPluginCapabilities(global::Csi.V0.GetPluginCapabilitiesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetPluginCapabilities(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Csi.V0.GetPluginCapabilitiesResponse GetPluginCapabilities(global::Csi.V0.GetPluginCapabilitiesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetPluginCapabilities, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Csi.V0.GetPluginCapabilitiesResponse> GetPluginCapabilitiesAsync(global::Csi.V0.GetPluginCapabilitiesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetPluginCapabilitiesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Csi.V0.GetPluginCapabilitiesResponse> GetPluginCapabilitiesAsync(global::Csi.V0.GetPluginCapabilitiesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetPluginCapabilities, null, options, request);
      }
      public virtual global::Csi.V0.ProbeResponse Probe(global::Csi.V0.ProbeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Probe(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Csi.V0.ProbeResponse Probe(global::Csi.V0.ProbeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Probe, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Csi.V0.ProbeResponse> ProbeAsync(global::Csi.V0.ProbeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ProbeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Csi.V0.ProbeResponse> ProbeAsync(global::Csi.V0.ProbeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Probe, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override IdentityClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new IdentityClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(IdentityBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetPluginInfo, serviceImpl.GetPluginInfo)
          .AddMethod(__Method_GetPluginCapabilities, serviceImpl.GetPluginCapabilities)
          .AddMethod(__Method_Probe, serviceImpl.Probe).Build();
    }

  }
  public static partial class Controller
  {
    static readonly string __ServiceName = "csi.v0.Controller";

    static readonly grpc::Marshaller<global::Csi.V0.CreateVolumeRequest> __Marshaller_CreateVolumeRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Csi.V0.CreateVolumeRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Csi.V0.CreateVolumeResponse> __Marshaller_CreateVolumeResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Csi.V0.CreateVolumeResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Csi.V0.DeleteVolumeRequest> __Marshaller_DeleteVolumeRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Csi.V0.DeleteVolumeRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Csi.V0.DeleteVolumeResponse> __Marshaller_DeleteVolumeResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Csi.V0.DeleteVolumeResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Csi.V0.ControllerPublishVolumeRequest> __Marshaller_ControllerPublishVolumeRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Csi.V0.ControllerPublishVolumeRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Csi.V0.ControllerPublishVolumeResponse> __Marshaller_ControllerPublishVolumeResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Csi.V0.ControllerPublishVolumeResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Csi.V0.ControllerUnpublishVolumeRequest> __Marshaller_ControllerUnpublishVolumeRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Csi.V0.ControllerUnpublishVolumeRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Csi.V0.ControllerUnpublishVolumeResponse> __Marshaller_ControllerUnpublishVolumeResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Csi.V0.ControllerUnpublishVolumeResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Csi.V0.ValidateVolumeCapabilitiesRequest> __Marshaller_ValidateVolumeCapabilitiesRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Csi.V0.ValidateVolumeCapabilitiesRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Csi.V0.ValidateVolumeCapabilitiesResponse> __Marshaller_ValidateVolumeCapabilitiesResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Csi.V0.ValidateVolumeCapabilitiesResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Csi.V0.ListVolumesRequest> __Marshaller_ListVolumesRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Csi.V0.ListVolumesRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Csi.V0.ListVolumesResponse> __Marshaller_ListVolumesResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Csi.V0.ListVolumesResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Csi.V0.GetCapacityRequest> __Marshaller_GetCapacityRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Csi.V0.GetCapacityRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Csi.V0.GetCapacityResponse> __Marshaller_GetCapacityResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Csi.V0.GetCapacityResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Csi.V0.ControllerGetCapabilitiesRequest> __Marshaller_ControllerGetCapabilitiesRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Csi.V0.ControllerGetCapabilitiesRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Csi.V0.ControllerGetCapabilitiesResponse> __Marshaller_ControllerGetCapabilitiesResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Csi.V0.ControllerGetCapabilitiesResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::Csi.V0.CreateVolumeRequest, global::Csi.V0.CreateVolumeResponse> __Method_CreateVolume = new grpc::Method<global::Csi.V0.CreateVolumeRequest, global::Csi.V0.CreateVolumeResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateVolume",
        __Marshaller_CreateVolumeRequest,
        __Marshaller_CreateVolumeResponse);

    static readonly grpc::Method<global::Csi.V0.DeleteVolumeRequest, global::Csi.V0.DeleteVolumeResponse> __Method_DeleteVolume = new grpc::Method<global::Csi.V0.DeleteVolumeRequest, global::Csi.V0.DeleteVolumeResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteVolume",
        __Marshaller_DeleteVolumeRequest,
        __Marshaller_DeleteVolumeResponse);

    static readonly grpc::Method<global::Csi.V0.ControllerPublishVolumeRequest, global::Csi.V0.ControllerPublishVolumeResponse> __Method_ControllerPublishVolume = new grpc::Method<global::Csi.V0.ControllerPublishVolumeRequest, global::Csi.V0.ControllerPublishVolumeResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ControllerPublishVolume",
        __Marshaller_ControllerPublishVolumeRequest,
        __Marshaller_ControllerPublishVolumeResponse);

    static readonly grpc::Method<global::Csi.V0.ControllerUnpublishVolumeRequest, global::Csi.V0.ControllerUnpublishVolumeResponse> __Method_ControllerUnpublishVolume = new grpc::Method<global::Csi.V0.ControllerUnpublishVolumeRequest, global::Csi.V0.ControllerUnpublishVolumeResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ControllerUnpublishVolume",
        __Marshaller_ControllerUnpublishVolumeRequest,
        __Marshaller_ControllerUnpublishVolumeResponse);

    static readonly grpc::Method<global::Csi.V0.ValidateVolumeCapabilitiesRequest, global::Csi.V0.ValidateVolumeCapabilitiesResponse> __Method_ValidateVolumeCapabilities = new grpc::Method<global::Csi.V0.ValidateVolumeCapabilitiesRequest, global::Csi.V0.ValidateVolumeCapabilitiesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ValidateVolumeCapabilities",
        __Marshaller_ValidateVolumeCapabilitiesRequest,
        __Marshaller_ValidateVolumeCapabilitiesResponse);

    static readonly grpc::Method<global::Csi.V0.ListVolumesRequest, global::Csi.V0.ListVolumesResponse> __Method_ListVolumes = new grpc::Method<global::Csi.V0.ListVolumesRequest, global::Csi.V0.ListVolumesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListVolumes",
        __Marshaller_ListVolumesRequest,
        __Marshaller_ListVolumesResponse);

    static readonly grpc::Method<global::Csi.V0.GetCapacityRequest, global::Csi.V0.GetCapacityResponse> __Method_GetCapacity = new grpc::Method<global::Csi.V0.GetCapacityRequest, global::Csi.V0.GetCapacityResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetCapacity",
        __Marshaller_GetCapacityRequest,
        __Marshaller_GetCapacityResponse);

    static readonly grpc::Method<global::Csi.V0.ControllerGetCapabilitiesRequest, global::Csi.V0.ControllerGetCapabilitiesResponse> __Method_ControllerGetCapabilities = new grpc::Method<global::Csi.V0.ControllerGetCapabilitiesRequest, global::Csi.V0.ControllerGetCapabilitiesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ControllerGetCapabilities",
        __Marshaller_ControllerGetCapabilitiesRequest,
        __Marshaller_ControllerGetCapabilitiesResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Csi.V0.CsiReflection.Descriptor.Services[1]; }
    }

    /// <summary>Base class for server-side implementations of Controller</summary>
    public abstract partial class ControllerBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Csi.V0.CreateVolumeResponse> CreateVolume(global::Csi.V0.CreateVolumeRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Csi.V0.DeleteVolumeResponse> DeleteVolume(global::Csi.V0.DeleteVolumeRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Csi.V0.ControllerPublishVolumeResponse> ControllerPublishVolume(global::Csi.V0.ControllerPublishVolumeRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Csi.V0.ControllerUnpublishVolumeResponse> ControllerUnpublishVolume(global::Csi.V0.ControllerUnpublishVolumeRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Csi.V0.ValidateVolumeCapabilitiesResponse> ValidateVolumeCapabilities(global::Csi.V0.ValidateVolumeCapabilitiesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Csi.V0.ListVolumesResponse> ListVolumes(global::Csi.V0.ListVolumesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Csi.V0.GetCapacityResponse> GetCapacity(global::Csi.V0.GetCapacityRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Csi.V0.ControllerGetCapabilitiesResponse> ControllerGetCapabilities(global::Csi.V0.ControllerGetCapabilitiesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Controller</summary>
    public partial class ControllerClient : grpc::ClientBase<ControllerClient>
    {
      /// <summary>Creates a new client for Controller</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public ControllerClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Controller that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public ControllerClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected ControllerClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected ControllerClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Csi.V0.CreateVolumeResponse CreateVolume(global::Csi.V0.CreateVolumeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateVolume(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Csi.V0.CreateVolumeResponse CreateVolume(global::Csi.V0.CreateVolumeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateVolume, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Csi.V0.CreateVolumeResponse> CreateVolumeAsync(global::Csi.V0.CreateVolumeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateVolumeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Csi.V0.CreateVolumeResponse> CreateVolumeAsync(global::Csi.V0.CreateVolumeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateVolume, null, options, request);
      }
      public virtual global::Csi.V0.DeleteVolumeResponse DeleteVolume(global::Csi.V0.DeleteVolumeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteVolume(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Csi.V0.DeleteVolumeResponse DeleteVolume(global::Csi.V0.DeleteVolumeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteVolume, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Csi.V0.DeleteVolumeResponse> DeleteVolumeAsync(global::Csi.V0.DeleteVolumeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteVolumeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Csi.V0.DeleteVolumeResponse> DeleteVolumeAsync(global::Csi.V0.DeleteVolumeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteVolume, null, options, request);
      }
      public virtual global::Csi.V0.ControllerPublishVolumeResponse ControllerPublishVolume(global::Csi.V0.ControllerPublishVolumeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ControllerPublishVolume(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Csi.V0.ControllerPublishVolumeResponse ControllerPublishVolume(global::Csi.V0.ControllerPublishVolumeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ControllerPublishVolume, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Csi.V0.ControllerPublishVolumeResponse> ControllerPublishVolumeAsync(global::Csi.V0.ControllerPublishVolumeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ControllerPublishVolumeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Csi.V0.ControllerPublishVolumeResponse> ControllerPublishVolumeAsync(global::Csi.V0.ControllerPublishVolumeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ControllerPublishVolume, null, options, request);
      }
      public virtual global::Csi.V0.ControllerUnpublishVolumeResponse ControllerUnpublishVolume(global::Csi.V0.ControllerUnpublishVolumeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ControllerUnpublishVolume(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Csi.V0.ControllerUnpublishVolumeResponse ControllerUnpublishVolume(global::Csi.V0.ControllerUnpublishVolumeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ControllerUnpublishVolume, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Csi.V0.ControllerUnpublishVolumeResponse> ControllerUnpublishVolumeAsync(global::Csi.V0.ControllerUnpublishVolumeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ControllerUnpublishVolumeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Csi.V0.ControllerUnpublishVolumeResponse> ControllerUnpublishVolumeAsync(global::Csi.V0.ControllerUnpublishVolumeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ControllerUnpublishVolume, null, options, request);
      }
      public virtual global::Csi.V0.ValidateVolumeCapabilitiesResponse ValidateVolumeCapabilities(global::Csi.V0.ValidateVolumeCapabilitiesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ValidateVolumeCapabilities(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Csi.V0.ValidateVolumeCapabilitiesResponse ValidateVolumeCapabilities(global::Csi.V0.ValidateVolumeCapabilitiesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ValidateVolumeCapabilities, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Csi.V0.ValidateVolumeCapabilitiesResponse> ValidateVolumeCapabilitiesAsync(global::Csi.V0.ValidateVolumeCapabilitiesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ValidateVolumeCapabilitiesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Csi.V0.ValidateVolumeCapabilitiesResponse> ValidateVolumeCapabilitiesAsync(global::Csi.V0.ValidateVolumeCapabilitiesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ValidateVolumeCapabilities, null, options, request);
      }
      public virtual global::Csi.V0.ListVolumesResponse ListVolumes(global::Csi.V0.ListVolumesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListVolumes(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Csi.V0.ListVolumesResponse ListVolumes(global::Csi.V0.ListVolumesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListVolumes, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Csi.V0.ListVolumesResponse> ListVolumesAsync(global::Csi.V0.ListVolumesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListVolumesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Csi.V0.ListVolumesResponse> ListVolumesAsync(global::Csi.V0.ListVolumesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListVolumes, null, options, request);
      }
      public virtual global::Csi.V0.GetCapacityResponse GetCapacity(global::Csi.V0.GetCapacityRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCapacity(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Csi.V0.GetCapacityResponse GetCapacity(global::Csi.V0.GetCapacityRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetCapacity, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Csi.V0.GetCapacityResponse> GetCapacityAsync(global::Csi.V0.GetCapacityRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCapacityAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Csi.V0.GetCapacityResponse> GetCapacityAsync(global::Csi.V0.GetCapacityRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetCapacity, null, options, request);
      }
      public virtual global::Csi.V0.ControllerGetCapabilitiesResponse ControllerGetCapabilities(global::Csi.V0.ControllerGetCapabilitiesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ControllerGetCapabilities(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Csi.V0.ControllerGetCapabilitiesResponse ControllerGetCapabilities(global::Csi.V0.ControllerGetCapabilitiesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ControllerGetCapabilities, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Csi.V0.ControllerGetCapabilitiesResponse> ControllerGetCapabilitiesAsync(global::Csi.V0.ControllerGetCapabilitiesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ControllerGetCapabilitiesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Csi.V0.ControllerGetCapabilitiesResponse> ControllerGetCapabilitiesAsync(global::Csi.V0.ControllerGetCapabilitiesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ControllerGetCapabilities, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override ControllerClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new ControllerClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(ControllerBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_CreateVolume, serviceImpl.CreateVolume)
          .AddMethod(__Method_DeleteVolume, serviceImpl.DeleteVolume)
          .AddMethod(__Method_ControllerPublishVolume, serviceImpl.ControllerPublishVolume)
          .AddMethod(__Method_ControllerUnpublishVolume, serviceImpl.ControllerUnpublishVolume)
          .AddMethod(__Method_ValidateVolumeCapabilities, serviceImpl.ValidateVolumeCapabilities)
          .AddMethod(__Method_ListVolumes, serviceImpl.ListVolumes)
          .AddMethod(__Method_GetCapacity, serviceImpl.GetCapacity)
          .AddMethod(__Method_ControllerGetCapabilities, serviceImpl.ControllerGetCapabilities).Build();
    }

  }
  public static partial class Node
  {
    static readonly string __ServiceName = "csi.v0.Node";

    static readonly grpc::Marshaller<global::Csi.V0.NodeStageVolumeRequest> __Marshaller_NodeStageVolumeRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Csi.V0.NodeStageVolumeRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Csi.V0.NodeStageVolumeResponse> __Marshaller_NodeStageVolumeResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Csi.V0.NodeStageVolumeResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Csi.V0.NodeUnstageVolumeRequest> __Marshaller_NodeUnstageVolumeRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Csi.V0.NodeUnstageVolumeRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Csi.V0.NodeUnstageVolumeResponse> __Marshaller_NodeUnstageVolumeResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Csi.V0.NodeUnstageVolumeResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Csi.V0.NodePublishVolumeRequest> __Marshaller_NodePublishVolumeRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Csi.V0.NodePublishVolumeRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Csi.V0.NodePublishVolumeResponse> __Marshaller_NodePublishVolumeResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Csi.V0.NodePublishVolumeResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Csi.V0.NodeUnpublishVolumeRequest> __Marshaller_NodeUnpublishVolumeRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Csi.V0.NodeUnpublishVolumeRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Csi.V0.NodeUnpublishVolumeResponse> __Marshaller_NodeUnpublishVolumeResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Csi.V0.NodeUnpublishVolumeResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Csi.V0.NodeGetIdRequest> __Marshaller_NodeGetIdRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Csi.V0.NodeGetIdRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Csi.V0.NodeGetIdResponse> __Marshaller_NodeGetIdResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Csi.V0.NodeGetIdResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Csi.V0.NodeGetCapabilitiesRequest> __Marshaller_NodeGetCapabilitiesRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Csi.V0.NodeGetCapabilitiesRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Csi.V0.NodeGetCapabilitiesResponse> __Marshaller_NodeGetCapabilitiesResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Csi.V0.NodeGetCapabilitiesResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::Csi.V0.NodeStageVolumeRequest, global::Csi.V0.NodeStageVolumeResponse> __Method_NodeStageVolume = new grpc::Method<global::Csi.V0.NodeStageVolumeRequest, global::Csi.V0.NodeStageVolumeResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "NodeStageVolume",
        __Marshaller_NodeStageVolumeRequest,
        __Marshaller_NodeStageVolumeResponse);

    static readonly grpc::Method<global::Csi.V0.NodeUnstageVolumeRequest, global::Csi.V0.NodeUnstageVolumeResponse> __Method_NodeUnstageVolume = new grpc::Method<global::Csi.V0.NodeUnstageVolumeRequest, global::Csi.V0.NodeUnstageVolumeResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "NodeUnstageVolume",
        __Marshaller_NodeUnstageVolumeRequest,
        __Marshaller_NodeUnstageVolumeResponse);

    static readonly grpc::Method<global::Csi.V0.NodePublishVolumeRequest, global::Csi.V0.NodePublishVolumeResponse> __Method_NodePublishVolume = new grpc::Method<global::Csi.V0.NodePublishVolumeRequest, global::Csi.V0.NodePublishVolumeResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "NodePublishVolume",
        __Marshaller_NodePublishVolumeRequest,
        __Marshaller_NodePublishVolumeResponse);

    static readonly grpc::Method<global::Csi.V0.NodeUnpublishVolumeRequest, global::Csi.V0.NodeUnpublishVolumeResponse> __Method_NodeUnpublishVolume = new grpc::Method<global::Csi.V0.NodeUnpublishVolumeRequest, global::Csi.V0.NodeUnpublishVolumeResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "NodeUnpublishVolume",
        __Marshaller_NodeUnpublishVolumeRequest,
        __Marshaller_NodeUnpublishVolumeResponse);

    static readonly grpc::Method<global::Csi.V0.NodeGetIdRequest, global::Csi.V0.NodeGetIdResponse> __Method_NodeGetId = new grpc::Method<global::Csi.V0.NodeGetIdRequest, global::Csi.V0.NodeGetIdResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "NodeGetId",
        __Marshaller_NodeGetIdRequest,
        __Marshaller_NodeGetIdResponse);

    static readonly grpc::Method<global::Csi.V0.NodeGetCapabilitiesRequest, global::Csi.V0.NodeGetCapabilitiesResponse> __Method_NodeGetCapabilities = new grpc::Method<global::Csi.V0.NodeGetCapabilitiesRequest, global::Csi.V0.NodeGetCapabilitiesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "NodeGetCapabilities",
        __Marshaller_NodeGetCapabilitiesRequest,
        __Marshaller_NodeGetCapabilitiesResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Csi.V0.CsiReflection.Descriptor.Services[2]; }
    }

    /// <summary>Base class for server-side implementations of Node</summary>
    public abstract partial class NodeBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Csi.V0.NodeStageVolumeResponse> NodeStageVolume(global::Csi.V0.NodeStageVolumeRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Csi.V0.NodeUnstageVolumeResponse> NodeUnstageVolume(global::Csi.V0.NodeUnstageVolumeRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Csi.V0.NodePublishVolumeResponse> NodePublishVolume(global::Csi.V0.NodePublishVolumeRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Csi.V0.NodeUnpublishVolumeResponse> NodeUnpublishVolume(global::Csi.V0.NodeUnpublishVolumeRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Csi.V0.NodeGetIdResponse> NodeGetId(global::Csi.V0.NodeGetIdRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Csi.V0.NodeGetCapabilitiesResponse> NodeGetCapabilities(global::Csi.V0.NodeGetCapabilitiesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Node</summary>
    public partial class NodeClient : grpc::ClientBase<NodeClient>
    {
      /// <summary>Creates a new client for Node</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public NodeClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Node that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public NodeClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected NodeClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected NodeClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Csi.V0.NodeStageVolumeResponse NodeStageVolume(global::Csi.V0.NodeStageVolumeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return NodeStageVolume(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Csi.V0.NodeStageVolumeResponse NodeStageVolume(global::Csi.V0.NodeStageVolumeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_NodeStageVolume, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Csi.V0.NodeStageVolumeResponse> NodeStageVolumeAsync(global::Csi.V0.NodeStageVolumeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return NodeStageVolumeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Csi.V0.NodeStageVolumeResponse> NodeStageVolumeAsync(global::Csi.V0.NodeStageVolumeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_NodeStageVolume, null, options, request);
      }
      public virtual global::Csi.V0.NodeUnstageVolumeResponse NodeUnstageVolume(global::Csi.V0.NodeUnstageVolumeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return NodeUnstageVolume(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Csi.V0.NodeUnstageVolumeResponse NodeUnstageVolume(global::Csi.V0.NodeUnstageVolumeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_NodeUnstageVolume, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Csi.V0.NodeUnstageVolumeResponse> NodeUnstageVolumeAsync(global::Csi.V0.NodeUnstageVolumeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return NodeUnstageVolumeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Csi.V0.NodeUnstageVolumeResponse> NodeUnstageVolumeAsync(global::Csi.V0.NodeUnstageVolumeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_NodeUnstageVolume, null, options, request);
      }
      public virtual global::Csi.V0.NodePublishVolumeResponse NodePublishVolume(global::Csi.V0.NodePublishVolumeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return NodePublishVolume(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Csi.V0.NodePublishVolumeResponse NodePublishVolume(global::Csi.V0.NodePublishVolumeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_NodePublishVolume, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Csi.V0.NodePublishVolumeResponse> NodePublishVolumeAsync(global::Csi.V0.NodePublishVolumeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return NodePublishVolumeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Csi.V0.NodePublishVolumeResponse> NodePublishVolumeAsync(global::Csi.V0.NodePublishVolumeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_NodePublishVolume, null, options, request);
      }
      public virtual global::Csi.V0.NodeUnpublishVolumeResponse NodeUnpublishVolume(global::Csi.V0.NodeUnpublishVolumeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return NodeUnpublishVolume(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Csi.V0.NodeUnpublishVolumeResponse NodeUnpublishVolume(global::Csi.V0.NodeUnpublishVolumeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_NodeUnpublishVolume, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Csi.V0.NodeUnpublishVolumeResponse> NodeUnpublishVolumeAsync(global::Csi.V0.NodeUnpublishVolumeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return NodeUnpublishVolumeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Csi.V0.NodeUnpublishVolumeResponse> NodeUnpublishVolumeAsync(global::Csi.V0.NodeUnpublishVolumeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_NodeUnpublishVolume, null, options, request);
      }
      public virtual global::Csi.V0.NodeGetIdResponse NodeGetId(global::Csi.V0.NodeGetIdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return NodeGetId(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Csi.V0.NodeGetIdResponse NodeGetId(global::Csi.V0.NodeGetIdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_NodeGetId, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Csi.V0.NodeGetIdResponse> NodeGetIdAsync(global::Csi.V0.NodeGetIdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return NodeGetIdAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Csi.V0.NodeGetIdResponse> NodeGetIdAsync(global::Csi.V0.NodeGetIdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_NodeGetId, null, options, request);
      }
      public virtual global::Csi.V0.NodeGetCapabilitiesResponse NodeGetCapabilities(global::Csi.V0.NodeGetCapabilitiesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return NodeGetCapabilities(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Csi.V0.NodeGetCapabilitiesResponse NodeGetCapabilities(global::Csi.V0.NodeGetCapabilitiesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_NodeGetCapabilities, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Csi.V0.NodeGetCapabilitiesResponse> NodeGetCapabilitiesAsync(global::Csi.V0.NodeGetCapabilitiesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return NodeGetCapabilitiesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Csi.V0.NodeGetCapabilitiesResponse> NodeGetCapabilitiesAsync(global::Csi.V0.NodeGetCapabilitiesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_NodeGetCapabilities, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override NodeClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new NodeClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(NodeBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_NodeStageVolume, serviceImpl.NodeStageVolume)
          .AddMethod(__Method_NodeUnstageVolume, serviceImpl.NodeUnstageVolume)
          .AddMethod(__Method_NodePublishVolume, serviceImpl.NodePublishVolume)
          .AddMethod(__Method_NodeUnpublishVolume, serviceImpl.NodeUnpublishVolume)
          .AddMethod(__Method_NodeGetId, serviceImpl.NodeGetId)
          .AddMethod(__Method_NodeGetCapabilities, serviceImpl.NodeGetCapabilities).Build();
    }

  }
}
#endregion
